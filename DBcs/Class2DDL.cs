using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace DBcs;

public class Class2DDL
{
    private record ClassColumn
    {
        public string Column = "";
        public string Constraint = "";
    }

    public async Task<string> getDDL(Type[] types, string[] tableNames)
    {
        var ret = "";
        var cnt = 0;
        foreach (Type type in types)
        {
            ret += $"{await GetClassCodeString(type, tableNames[cnt])}{Environment.NewLine}";
            cnt++;
        }
        return ret;
    }
    private async Task<string> GetClassCodeString(Type type, string tableName = "")
    {
        var ret = "";
        if (string.IsNullOrEmpty(tableName))
        {
            //try to get tablename from class attribute
            var attributes = type.GetCustomAttributes(true);
            foreach (var a in attributes)
            {
                if (a is TableAttribute tableAttr)
                {
                    tableName = tableAttr.Name;
                }
            }
        }
        // stil no table name, use something
        if (string.IsNullOrEmpty(tableName))
        {
            tableName = $"table_{type.Name.Replace(".", "_")}";
        }

        ret = $"create table if not exists {tableName}({Environment.NewLine}";
        var propertyInfos = type.GetProperties();

        var constraints = "";
        foreach (var pi in propertyInfos)
        {
            var p = GetPropertyDDL(pi, tableName);
            ret += p.Column;
            constraints += p.Constraint;

        }
        ret = $"{ret}{constraints}{Environment.NewLine});";
        return ret;
    }
    private ClassColumn GetPropertyDDL(PropertyInfo pi, string tableName)
    {
        var ret = new ClassColumn();
        var nullable = "";
        if (Utility.IsMarkedAsNullable(pi))
            nullable = "null";
        else
            nullable = "not null";
        ret.Column = $"   {Utility.CamelToSnake(pi.Name)}\t\t{GetDbType(pi.PropertyType)}\t\t{nullable}";
        // key anbd foreign key
        ret.Constraint = "";
        var attributes = pi.CustomAttributes;
        foreach (var a in attributes)
        {

            if (a.AttributeType == typeof(KeyAttribute))
            {
                ret.Constraint += $"   constraint pk_{tableName} PRIMARY KEY ({Utility.CamelToSnake(pi.Name)}),";
                ret.Column += " generated by default as identity";
            }
            if (a.AttributeType == typeof(ForeignKey))
            {
                //  var referencedTableName = a.NamedArguments 
                ret.Constraint += $"constraint fk_{tableName} fk_questions_categories_category_id FOREIGN KEY ({Utility.CamelToSnake(pi.Name)}){Environment.NewLine}" +
                            $"REFERENCES public.categories (id) MATCH SIMPLE{Environment.NewLine}" +
                            $"ON UPDATE NO ACTION{Environment.NewLine}" +
                            $" ON DELETE CASCADE,{Environment.NewLine}";
            }
        }
        ret.Column += $",{Environment.NewLine}";
        return ret;
    }
    private string GetDbType(Type type)
    {
        var ret = type.Name;
        if (type == typeof(int) || type == typeof(int?))
        {
            return "int";
        }
        if (type == typeof(bool) || type == typeof(bool?))
        {
            return "boolean";
        }

        if (type == typeof(string))
        {
            return "text";
        }
        return ret;
    }
}
